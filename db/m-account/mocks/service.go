// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "main.go/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, account
func (_m *Service) Add(ctx context.Context, account model.MerchantAccount) error {
	ret := _m.Called(ctx, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MerchantAccount) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, code
func (_m *Service) Delete(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, code
func (_m *Service) Get(ctx context.Context, code string) (model.MerchantAccountEntity, error) {
	ret := _m.Called(ctx, code)

	var r0 model.MerchantAccountEntity
	if rf, ok := ret.Get(0).(func(context.Context, string) model.MerchantAccountEntity); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(model.MerchantAccountEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, account
func (_m *Service) Update(ctx context.Context, account model.MerchantAccount) error {
	ret := _m.Called(ctx, account)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MerchantAccount) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
